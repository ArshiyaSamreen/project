1.
def swap_case(s):   
    return (''.join([i.lower() if i.isupper() else i.upper() for i in s]))
2.
def split_and_join(line):
    a = line.split(" ")
    a = "-".join(a)
    return a
3.
def print_full_name(a, b):
    print("Hello {0} {1}! You just delved into python.".format(a,b))
4.
def mutate_string(string, position, character):
    l = list(string)
    l[position] = character
    string = ''.join(l)
    return string
5.
def count_substring(string, sub_string):
    count=0
    for i in range(len(string)-len(sub_string)+1):
        if (string[i:i+len(sub_string)]==sub_string):
            count+=1
    return count
6.
x = input()
    print(any([i.isalnum() for i in x ]))
    print(any([i.isalpha() for i in x ]))
    print(any([i.isdigit() for i in x ]))
    print(any([i.islower() for i in x ]))
    print(any([i.isupper() for i in x ]))
7.
thickness = int(input()) #This must be an odd number
c = 'H'

#Top Cone
for i in range(thickness):
    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))

#Top Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

#Middle Belt
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))    

#Bottom Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))    

#Bottom Cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))
8.
import textwrap

def wrap(string, max_width):
    return textwrap.fill(string,max_width)
9.
n, m = map(int,input().split())
pattern = [('.|.'*(2*i + 1)).center(m, '-') for i in range(n//2)]
print('\n'.join(pattern + ['WELCOME'.center(m, '-')] + pattern[::-1]))
10.
def print_formatted(number):
    w = len(str(bin(number)).replace('0b',''))
    for i in range(1,number+1):   
        d = str(i).rjust(w,' ')
        b = bin(i)[2:].rjust(w,' ')   ## rjust is used for line alignment
        o = oct(i)[2:].rjust(w, ' ')
        h = hex(i)[2:].rjust(w, ' ').upper()
        print(d, o, h, b)
11. 
def print_rangoli(size):
    from string import ascii_lowercase as chars
    heap = [(('-'.join(chars[i:n])[::-1]+'-'.join(chars[i:n])[1:])).center(4*n-3, '-')       for i in range(n)]
    print(*(heap[::-1]+heap[1:]), sep="\n")

12.
def solve(s):
    for i in s.split():
        s=s.replace(i,i.capitalize())
    return s
13.
def minion_game(string):
    player1 = 0;
    player2 = 0;
    str_len = len(string)
    for i in range(str_len):
        if s[i] in "AEIOU":
            player1 += (str_len)-i
        else :
            player2 += (str_len)-i
    
    if player1 > player2:
        print("Kevin", player1)
    elif player1 < player2:
        print("Stuart",player2)
    elif player1 == player2:
        print("Draw")
    else :
        print("Draw")
14.
def merge_the_tools(string, k):
    temp = []
    len_temp = 0
    for item in string:
        len_temp += 1
        if item not in temp:
            temp.append(item)
        if len_temp == k:
            print (''.join(temp))
            temp = []
            len_temp = 0
